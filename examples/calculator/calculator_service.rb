#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'

module CalculatorService
  class Client
    include ::Thrift::Client

    def say_hello(name)
      send_say_hello(name)
      return recv_say_hello()
    end

    def send_say_hello(name)
      send_message('say_hello', Say_hello_args, :name => name)
    end

    def recv_say_hello()
      result = receive_message(Say_hello_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'say_hello failed: unknown result')
    end

    def add(value1, value2)
      send_add(value1, value2)
      return recv_add()
    end

    def send_add(value1, value2)
      send_message('add', Add_args, :value1 => value1, :value2 => value2)
    end

    def recv_add()
      result = receive_message(Add_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'add failed: unknown result')
    end

    def divide(dividend, divisor)
      send_divide(dividend, divisor)
      return recv_divide()
    end

    def send_divide(dividend, divisor)
      send_message('divide', Divide_args, :dividend => dividend, :divisor => divisor)
    end

    def recv_divide()
      result = receive_message(Divide_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'divide failed: unknown result')
    end

    def ping()
      send_ping()
      recv_ping()
    end

    def send_ping()
      send_message('ping', Ping_args)
    end

    def recv_ping()
      result = receive_message(Ping_result)
      return
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_say_hello(seqid, iprot, oprot)
      args = read_args(iprot, Say_hello_args)
      result = Say_hello_result.new()
      result.success = @handler.say_hello(args.name)
      write_result(result, oprot, 'say_hello', seqid)
    end

    def process_add(seqid, iprot, oprot)
      args = read_args(iprot, Add_args)
      result = Add_result.new()
      result.success = @handler.add(args.value1, args.value2)
      write_result(result, oprot, 'add', seqid)
    end

    def process_divide(seqid, iprot, oprot)
      args = read_args(iprot, Divide_args)
      result = Divide_result.new()
      result.success = @handler.divide(args.dividend, args.divisor)
      write_result(result, oprot, 'divide', seqid)
    end

    def process_ping(seqid, iprot, oprot)
      args = read_args(iprot, Ping_args)
      result = Ping_result.new()
      @handler.ping()
      write_result(result, oprot, 'ping', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class Say_hello_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NAME = 1

    FIELDS = {
      NAME => {:type => ::Thrift::Types::STRING, :name => 'name'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Say_hello_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Add_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    VALUE1 = 1
    VALUE2 = 2

    FIELDS = {
      VALUE1 => {:type => ::Thrift::Types::I32, :name => 'value1'},
      VALUE2 => {:type => ::Thrift::Types::I32, :name => 'value2'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Add_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Divide_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DIVIDEND = 1
    DIVISOR = 2

    FIELDS = {
      DIVIDEND => {:type => ::Thrift::Types::I32, :name => 'dividend'},
      DIVISOR => {:type => ::Thrift::Types::I32, :name => 'divisor'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Divide_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::DOUBLE, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Ping_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Ping_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

